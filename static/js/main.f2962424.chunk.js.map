{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","api/instance.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","api/auth-api.ts","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","setAppInitializedAC","actions","appReducer","reducer","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","removeTaskAC","tasks","index","findIndex","t","splice","addTaskAC","task","todoListId","unshift","updateTaskAC","setTasksAC","extraReducers","builder","addCase","addTodolistAC","todolist","removeTodolistAC","setTodolistsAC","todolists","forEach","tl","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","map","clearTodolistsDataAC","todolistsReducer","fetchTodolistsTC","todo","td","items","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","isLoggedIn","auth","useEffect","thunk","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","authAPI","dataForLogin","setIsLoggedInAC","authReducer","Login","formik","useNavigate","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2962424.chunk.js","sourcesContent":["import { AxiosResponse } from 'axios'\r\nimport {instance} from \"./instance\";\r\n\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '089d3e24-70d2-4632-9ce2-42855d61866e'\r\n    }\r\n})","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const setAppStatusAC = slice.actions.setAppStatusAC\r\nexport const setAppInitializedAC = slice.actions.setAppInitializedAC\r\nexport const setAppErrorAC = slice.actions.setAppErrorAC\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType,\r\n    clearTodolistsDataAC, removeTodolistAC,\r\n    RemoveTodolistActionType, setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const removeTaskAC = slice.actions.removeTaskAC\r\nexport const addTaskAC = slice.actions.addTaskAC\r\nexport const updateTaskAC = slice.actions.updateTaskAC\r\nexport const setTasksAC = slice.actions.setTasksAC\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId: taskId, todolistId: todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task: task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId: taskId, model: domainModel, todolistId: todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof clearTodolistsDataAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n            //state.filter(tl => tl.id !== action.payload.id)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n           //state.map(tl => tl.id === action.payload.id ? {...tl, title: action.payload.title} : tl)\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n          //  state.map(tl => tl.id === action.payload.id ? {...tl, filter: action.payload.filter} : tl)\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n            //state.map(tl => tl.id === action.payload.id ? {...tl, entityStatus: action.payload.status} : tl)\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>) {\r\n           return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        clearTodolistsDataAC() {\r\n           return []\r\n       }\r\n    }\r\n})\r\n\r\n// export const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC,\r\n//     changeTodolistEntityStatusAC, setTodolistsAC, clearTodolistsDataAC} = slice.actions\r\n\r\nexport const removeTodolistAC = slice.actions.removeTodolistAC\r\nexport const addTodolistAC = slice.actions.addTodolistAC\r\nexport const changeTodolistTitleAC = slice.actions.changeTodolistTitleAC\r\nexport const changeTodolistFilterAC = slice.actions.changeTodolistFilterAC\r\nexport const changeTodolistEntityStatusAC = slice.actions.changeTodolistEntityStatusAC\r\nexport const setTodolistsAC = slice.actions.setTodolistsAC\r\nexport const clearTodolistsDataAC = slice.actions.clearTodolistsDataAC\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return res.data\r\n            })\r\n            .then(todo => {\r\n                todo.forEach((td) => {\r\n                    dispatch(fetchTasksTC(td.id))\r\n                })\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id:todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id:todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    // useEffect(() => {\r\n    //     if (demo) {\r\n    //         return\r\n    //     }\r\n    //     const thunk = fetchTasksTC(props.todolist.id)\r\n    //     dispatch(thunk)\r\n    // }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            const thunk = fetchTodolistsTC()\r\n            dispatch(thunk)\r\n        }\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {instance} from \"./instance\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {ResponseType} from \"./todolists-api\";\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(dataForLogin: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, dataForLogin)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string}>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`/auth/login`)\r\n    }\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport {setAppInitializedAC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/auth-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearTodolistsDataAC} from \"../TodolistsList/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n// type InitialStateType = typeof initialState\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nconst {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (dataForLogin: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(dataForLogin)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value:true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n               dispatch(clearTodolistsDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            dispatch(setIsLoggedInAC({value: false}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password must be more 2 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        // navigate('/')\r\n       return <Navigate to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                            // name={'email'}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                            // onBlur={formik.handleBlur}\r\n\r\n                        />\r\n                        {formik\r\n                            .touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        }\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                            // name={'password'}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            // name={'rememberMe'}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.rememberMe}\r\n                        />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { RequestStatusType } from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return  <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        To do List\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={'login'} element={<Login/>}/>\r\n                    <Route path={'404'} element={<h1 style={{textAlign: 'center'}}>404 Page not found</h1>}/>\r\n                    <Route path={'*'} element={<Navigate to={'404'}/>}/>\r\n                </Routes>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n            <App/>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}